# docker-compose.yml - The Supercharged Blueprint v6.0 (Robust & Explicit)
#
# This version implements the most robust method for handling environment
# variables for the database service, preventing startup race conditions.
# It also simplifies networking for maximum compatibility with cloud IDEs.

services:
  # --- 1. The User-Facing Interface (Flask) ---
  web:
    build:
      context: .
    container_name: flask-frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      # Explicitly tell Flask where the database lives on the Docker network.
      - POSTGRES_HOST=db
    depends_on:
      db:
        condition: service_healthy # Will not start until the DB is ready.

  # --- 2. The AI Core (FastAPI) ---
  ai_service:
    build:
      context: ./ai_service
    container_name: fastapi-ai-service
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service:/code
    environment:
      - POSTGRES_HOST=db
    depends_on:
      - db # Depends on the DB, but doesn't need to wait for it to be healthy.

  # --- 3. The Central Database (PostgreSQL) ---
  db:
    image: postgres:15-bullseye
    container_name: postgres-db
    restart: always
    
    # --- THE SUPERCHARGED FIX for Initialization Errors ---
    # We EXPLICITLY define the environment variables that PostgreSQL needs
    # on its very first run. Docker Compose will substitute the values
    # from the `.env` file here, ensuring the database never starts blind.
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
    volumes:
      # A named volume ensures our data persists even when the container is removed.
      - postgres_data:/var/lib/postgresql/data/
    ports:
      # Expose the port for potential direct access with external DB tools.
      - "5432:5432"
    healthcheck:
      # This is how other services know the database is ready to accept connections.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define the named volume for data persistence.
volumes:
  postgres_data: