# docker-compose.yml - v17.0 (The Final, Sovereign, and Synchronized Blueprint)
#
# This is the definitive architecture. It establishes a clear hierarchy of power,
# ensuring a flawless, predictable, and supercharged startup sequence every time.
# The system is now simple, robust, and built for greatness.

services:
  # --- 1. The Database Core (The Foundation) ---
  db:
    image: postgres:15-bullseye
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- 2. The Database Architect (The Builder) ---
  # A temporary, one-shot service whose ONLY job is to build the world.
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask-migrations
    volumes:
      - .:/app
    entrypoint: ["flask", "db", "upgrade"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - FLASK_APP=run.py
    depends_on:
      db:
        condition: service_healthy

  # --- 3. The User-Facing Interface (The Body) ---
  web:
    build:
      context: .
    container_name: flask-frontend
    restart: unless-stopped
    command: sh -c "./entrypoint.sh"
    env_file:
      - .env
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      - POSTGRES_HOST=db
      - FLASK_APP=run.py
    depends_on:
      migrations:
        condition: service_completed_successfully

  # --- 4. The Specialized AI Oracle (The Mind) ---
  ai_service:
    build:
      context: ./ai_service
    container_name: fastapi-ai-service
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service:/code
    environment:
      - POSTGRES_HOST=db
    # --- [THE SUPERCHARGED FIX] ---
    # The 'command' line has been REMOVED. Docker Compose will now defer to
    # the container's own powerful, self-contained startup command
    # defined in its Dockerfile (CMD ["uvicorn", ...]). This is the final
    # step in achieving architectural purity.
    depends_on:
      migrations:
        condition: service_completed_successfully

# --- Define the persistent data volume ---
volumes:
  postgres_data: