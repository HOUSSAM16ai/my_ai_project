# docker-compose.yml (Gitpod-Optimized v4.2)
services:
  db:
    image: postgres:15-bullseye
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      # استخدم $$ لتأجيل التوسيع داخل الحاوية (وليس على المضيف)
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    networks: [appnet]

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask-migrations
    init: true
    volumes:
      - .:/app
    command: ["flask", "db", "upgrade"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - FLASK_APP=run.py
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    logging:
      driver: json-file
      options: { max-size: "5m", max-file: "2" }
    networks: [appnet]

  ai_service:
    build:
      context: ./ai_service
    container_name: fastapi-ai-service
    init: true
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
    volumes:
      - ./ai_service:/code
    command: sh -c "./entrypoint.sh"
    depends_on:
      migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      chroma:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import sys, urllib.request; u=\"http://localhost:8000/\"; sys.exit(0) if urllib.request.urlopen(u, timeout=3).getcode() == 200 else sys.exit(1)'"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "8000:8000"
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    networks: [appnet]

  web:
    build:
      context: .
    container_name: flask-frontend
    init: true
    restart: unless-stopped
    env_file:
      - .env
    command: gunicorn "run:app" --bind=0.0.0.0:5000 --worker-tmp-dir /app/tmp
    volumes:
      - .:/app
    depends_on:
      migrations:
        condition: service_completed_successfully
      ai_service:
        condition: service_healthy
    # Healthcheck اختياري للتأكد من جاهزية الواجهة
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import sys, urllib.request; u=\"http://localhost:5000/\"; sys.exit(0) if urllib.request.urlopen(u, timeout=3).getcode() == 200 else sys.exit(1)'"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "5000:5000"
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    networks: [appnet]

  chroma:
    image: chromadb/chroma
    container_name: chroma-db
    restart: unless-stopped
    volumes:
      # حسب اللوغات السابقة، Chroma يحفظ في /data
      - chroma_data:/data
    ports:
      - "8001:8000"
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }
    networks: [appnet]

volumes:
  postgres_data:
  chroma_data:

networks:
  appnet:
    driver: bridge