services:
  db:
    image: postgres:15-bullseye
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask-migrations
    volumes:
      - .:/app # <-- The CRITICAL FIX
    entrypoint: ["flask", "db", "upgrade"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
      - FLASK_APP=run.py
    depends_on:
      db:
        condition: service_healthy

  web:
    build:
      context: .
    container_name: flask-frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      - POSTGRES_HOST=db
      - FLASK_APP=run.py
    depends_on:
      migrations:
        condition: service_completed_successfully

  ai_service:
    build:
      context: ./ai_service
    container_name: fastapi-ai-service
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./ai_service:/code
    environment:
      - POSTGRES_HOST=db
    command: sh -c "./entrypoint.sh"
    depends_on:
      migrations:
        condition: service_completed_successfully

volumes:
  postgres_data: