# CI/CD Gate Checks Configuration
# ======================================================================================
# ==    SUPERHUMAN CI/CD PIPELINE WITH GATE CHECKS (v1.0 - QUALITY EDITION)       ==
# ======================================================================================
# PRIME DIRECTIVE:
#   نظام فحوصات البوابة للـ CI/CD الخارق
#   Superhuman CI/CD gate checks system
#
# This file defines the quality gates that must pass before code can be promoted
# between environments (Development -> Staging -> Production)

version: 1.0

# ======================================================================================
# ENVIRONMENTS
# ======================================================================================

environments:
  development:
    description: "Development environment for active development"
    deployment:
      auto_deploy: true
      approvals_required: 0
    
  staging:
    description: "Staging environment for pre-production testing"
    deployment:
      auto_deploy: true
      approvals_required: 1
      approvers:
        - "tech_lead"
    
  production:
    description: "Production environment serving live traffic"
    deployment:
      auto_deploy: false
      approvals_required: 2
      approvers:
        - "tech_lead"
        - "engineering_manager"

# ======================================================================================
# GATE CHECKS - DEVELOPMENT -> STAGING
# ======================================================================================

gate_checks_dev_to_staging:
  
  # 1. Code Quality
  code_quality:
    enabled: true
    checks:
      - name: "Linting"
        command: "flake8 app/ --max-line-length=120"
        fail_on_error: true
      
      - name: "Code formatting"
        command: "black --check app/"
        fail_on_error: false  # Warning only
      
      - name: "Import sorting"
        command: "isort --check-only app/"
        fail_on_error: false  # Warning only
  
  # 2. Unit Tests
  unit_tests:
    enabled: true
    minimum_coverage: 70  # 70% code coverage required
    checks:
      - name: "Run unit tests"
        command: "pytest tests/ -v --cov=app --cov-report=term-missing"
        fail_on_error: true
      
      - name: "Test duration check"
        max_duration_seconds: 300
        fail_on_error: true
  
  # 3. Security Scanning
  security:
    enabled: true
    checks:
      - name: "Dependency vulnerability scan"
        command: "safety check --json"
        fail_on_error: true
      
      - name: "OWASP compliance check"
        endpoint: "/api/governance/owasp-compliance"
        minimum_score: 80
        fail_on_error: true
      
      - name: "Secret scanning"
        command: "detect-secrets scan --baseline .secrets.baseline"
        fail_on_error: true
  
  # 4. API Contract Validation
  api_contracts:
    enabled: true
    checks:
      - name: "OpenAPI schema validation"
        endpoint: "/api/contract/validate"
        fail_on_error: true
      
      - name: "Breaking changes detection"
        command: "python scripts/detect_breaking_changes.py"
        fail_on_error: true
  
  # 5. Performance Baseline
  performance:
    enabled: true
    checks:
      - name: "Load test baseline"
        command: "locust -f tests/load_tests.py --headless -u 100 -r 10 --run-time 60s"
        metrics:
          max_p99_latency_ms: 1000
          min_requests_per_second: 100
        fail_on_error: false  # Warning only in staging

# ======================================================================================
# GATE CHECKS - STAGING -> PRODUCTION
# ======================================================================================

gate_checks_staging_to_production:
  
  # 1. All dev->staging checks must pass
  inherit_from: "gate_checks_dev_to_staging"
  
  # 2. Integration Tests
  integration_tests:
    enabled: true
    checks:
      - name: "Run integration tests"
        command: "pytest tests/integration/ -v"
        fail_on_error: true
      
      - name: "End-to-end tests"
        command: "pytest tests/e2e/ -v"
        fail_on_error: true
  
  # 3. SLO/SLI Validation
  slo_validation:
    enabled: true
    checks:
      - name: "SLO compliance check"
        endpoint: "/api/slo/dashboard"
        requirements:
          - slo_id: "slo_avail_30d"
            minimum_compliance: 99.9
          - slo_id: "slo_lat_30d"
            minimum_compliance: 99.0
          - slo_id: "slo_err_30d"
            minimum_compliance: 99.9
        fail_on_error: true
      
      - name: "Error budget check"
        endpoint: "/api/slo/dashboard"
        minimum_error_budget_remaining: 50  # 50% of budget must remain
        fail_on_error: true
  
  # 4. Disaster Recovery Validation
  disaster_recovery:
    enabled: true
    checks:
      - name: "DR plans up to date"
        endpoint: "/api/disaster-recovery/status"
        requirements:
          - no_overdue_tests: true
          - all_backups_verified: true
        fail_on_error: true
      
      - name: "Backup availability"
        command: "python scripts/verify_backups.py"
        fail_on_error: true
  
  # 5. Security Hardening
  security_hardening:
    enabled: true
    checks:
      - name: "OWASP compliance"
        endpoint: "/api/governance/owasp-compliance"
        minimum_score: 95  # Higher requirement for production
        fail_on_error: true
      
      - name: "Penetration testing"
        command: "python scripts/security_scan.py"
        fail_on_error: true
      
      - name: "SSL/TLS configuration"
        command: "python scripts/verify_ssl.py"
        fail_on_error: true
  
  # 6. Performance Requirements
  performance:
    enabled: true
    checks:
      - name: "Load test - production simulation"
        command: "locust -f tests/load_tests.py --headless -u 1000 -r 100 --run-time 300s"
        metrics:
          max_p99_latency_ms: 500
          min_requests_per_second: 500
          max_error_rate_percent: 0.1
        fail_on_error: true
      
      - name: "Stress test"
        command: "locust -f tests/stress_tests.py --headless -u 5000 -r 500 --run-time 60s"
        fail_on_error: false  # Should degrade gracefully
  
  # 7. Documentation Requirements
  documentation:
    enabled: true
    checks:
      - name: "API documentation up to date"
        command: "python scripts/verify_docs.py"
        fail_on_error: true
      
      - name: "Changelog updated"
        command: "git diff main..HEAD -- CHANGELOG.md | wc -l"
        minimum_changes: 1
        fail_on_error: true
  
  # 8. Deployment Readiness
  deployment_readiness:
    enabled: true
    checks:
      - name: "Database migrations ready"
        command: "flask db check"
        fail_on_error: true
      
      - name: "Feature flags configured"
        command: "python scripts/verify_feature_flags.py"
        fail_on_error: true
      
      - name: "Rollback plan documented"
        file_exists: "docs/rollback_plan_${VERSION}.md"
        fail_on_error: true

# ======================================================================================
# DEPLOYMENT STRATEGIES
# ======================================================================================

deployment_strategies:
  
  development:
    strategy: "immediate"
    description: "Deploy immediately on push"
    rollback_on_failure: true
  
  staging:
    strategy: "canary"
    description: "Canary deployment with gradual rollout"
    canary_config:
      initial_traffic_percent: 10
      increment_percent: 10
      increment_interval_minutes: 15
      success_threshold: 99.5
      rollback_on_failure: true
  
  production:
    strategy: "blue_green"
    description: "Blue-Green deployment with zero downtime"
    blue_green_config:
      warm_up_time_seconds: 300
      health_check_interval_seconds: 10
      health_check_threshold: 5
      automatic_promotion: false  # Requires manual approval
      rollback_window_minutes: 60

# ======================================================================================
# NOTIFICATIONS
# ======================================================================================

notifications:
  
  gate_check_failed:
    channels:
      - slack:
          webhook_url: "${SLACK_WEBHOOK_URL}"
          channel: "#engineering-alerts"
      - email:
          recipients:
            - "tech-lead@example.com"
            - "engineering-manager@example.com"
  
  deployment_started:
    channels:
      - slack:
          webhook_url: "${SLACK_WEBHOOK_URL}"
          channel: "#deployments"
  
  deployment_completed:
    channels:
      - slack:
          webhook_url: "${SLACK_WEBHOOK_URL}"
          channel: "#deployments"
      - email:
          recipients:
            - "team@example.com"
  
  deployment_failed:
    channels:
      - slack:
          webhook_url: "${SLACK_WEBHOOK_URL}"
          channel: "#engineering-alerts"
      - pagerduty:
          integration_key: "${PAGERDUTY_INTEGRATION_KEY}"
      - email:
          recipients:
            - "tech-lead@example.com"
            - "engineering-manager@example.com"
            - "sre-team@example.com"

# ======================================================================================
# ROLLBACK POLICIES
# ======================================================================================

rollback_policies:
  
  automatic_rollback_triggers:
    - condition: "error_rate > 1.0"
      description: "Error rate exceeds 1%"
      
    - condition: "p99_latency > 2000"
      description: "P99 latency exceeds 2 seconds"
      
    - condition: "availability < 99.0"
      description: "Availability drops below 99%"
      
    - condition: "failed_health_checks > 3"
      description: "Health checks fail more than 3 times"
  
  manual_rollback:
    enabled: true
    approvers:
      - "tech_lead"
      - "sre_engineer"
    
  rollback_procedure:
    - step: "Stop new deployment"
    - step: "Route traffic back to previous version"
    - step: "Verify previous version health"
    - step: "Create incident report"
    - step: "Notify stakeholders"

# ======================================================================================
# MONITORING & OBSERVABILITY
# ======================================================================================

post_deployment_monitoring:
  
  duration_minutes: 60  # Monitor for 1 hour after deployment
  
  metrics_to_track:
    - name: "error_rate"
      threshold: 0.5
      alert_on_breach: true
    
    - name: "p99_latency"
      threshold: 1000
      alert_on_breach: true
    
    - name: "requests_per_second"
      threshold: 100
      alert_on_breach: false
    
    - name: "cpu_utilization"
      threshold: 80
      alert_on_breach: true
    
    - name: "memory_utilization"
      threshold: 85
      alert_on_breach: true
  
  slo_tracking:
    enabled: true
    endpoint: "/api/slo/dashboard"
    check_interval_seconds: 60

# ======================================================================================
# FEATURE FLAGS
# ======================================================================================

feature_flags:
  
  enabled: true
  
  default_flags:
    - name: "new_api_endpoint"
      description: "Enable new API endpoint"
      environments:
        development: true
        staging: true
        production: false
    
    - name: "enhanced_security"
      description: "Enable enhanced security features"
      environments:
        development: true
        staging: true
        production: true
    
    - name: "experimental_caching"
      description: "Enable experimental caching layer"
      environments:
        development: true
        staging: false
        production: false

# ======================================================================================
# COMPLIANCE & AUDIT
# ======================================================================================

compliance:
  
  required_approvals:
    staging_deployment:
      minimum: 1
      roles: ["tech_lead", "senior_engineer"]
    
    production_deployment:
      minimum: 2
      roles: ["tech_lead", "engineering_manager"]
  
  audit_logging:
    enabled: true
    events_to_log:
      - deployment_started
      - deployment_completed
      - deployment_failed
      - gate_check_failed
      - rollback_initiated
      - approval_granted
      - approval_denied
  
  retention:
    deployment_logs_days: 90
    audit_logs_days: 365
    metrics_days: 30

# ======================================================================================
# END OF CONFIGURATION
# ======================================================================================
