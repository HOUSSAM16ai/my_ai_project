# ======================================================================================
# PYPROJECT.TOML - CogniForge Project Configuration (Superhuman Edition)
# ======================================================================================
# Centralized configuration for all Python tools - exceeding industry standards
# Built to surpass: Google, Facebook, Microsoft, OpenAI, and Apple standards

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cogniforge"
version = "2.0.0"
description = "AI-Powered Educational Platform with Superhuman Architecture"
authors = [
    {name = "Houssam Benmerah", email = "admin@cogniforge.ai"}
]
readme = "README.md"
requires-python = ">=3.12"
keywords = ["ai", "education", "overmind", "flask", "postgresql"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# ======================================================================================
# BLACK - Code Formatter (Industry Standard)
# ======================================================================================
[tool.black]
line-length = 100
target-version = ["py311"]
exclude = '''
(
  /(\.git|\.venv|\.mypy_cache|\.ruff_cache|build|dist|node_modules)/
  | ^.*/__pycache__/
)
'''

# ======================================================================================
# ISORT - Import Sorter (Google/Meta Standard)
# ======================================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/node_modules/*", "*/.venv/*"]
known_first_party = ["app", "config"]
known_third_party = ["flask", "sqlalchemy", "openai", "marshmallow"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ======================================================================================
# MYPY - Static Type Checker (Microsoft/Google Standard)
# ======================================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "flask_login.*",
    "flask_migrate.*",
    "flask_sqlalchemy.*",
    "marshmallow.*",
    "openai.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

# ======================================================================================
# PYLINT - Code Quality Checker (NASA/SpaceX Level)
# ======================================================================================
[tool.pylint.main]
jobs = 0  # Auto-detect CPU cores
recursive = true
ignore = ["migrations", ".venv", "node_modules", "build", "dist"]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
]

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring (handled by pydocstyle)
    "R0903",  # too-few-public-methods (Flask models are intentionally simple)
    "W0511",  # fixme (TODO comments are allowed)
    "C0103",  # invalid-name (allow short variable names in specific contexts)
    "R0913",  # too-many-arguments (sometimes necessary for API functions)
]

[tool.pylint.design]
max-args = 10
max-attributes = 15
max-bool-expr = 5
max-branches = 15
max-locals = 20
max-parents = 7
max-public-methods = 25
max-returns = 8
max-statements = 60
min-public-methods = 1

[tool.pylint.format]
max-line-length = 100
indent-string = "    "

# ======================================================================================
# PYTEST - Testing Framework (OpenAI/Anthropic Standard)
# ======================================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",  # Enforce 80% coverage minimum
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "db: Database tests",
    "api: API tests",
    "security: Security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/test_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ======================================================================================
# BANDIT - Security Linter (Superhuman Security Standards)
# ======================================================================================
# Configuration balances security strictness with practical development needs
# Based on OWASP Top 10, SANS Top 25, and industry best practices
[tool.bandit]
exclude_dirs = ["/tests", "/migrations", "/.venv", "/node_modules", "/htmlcov"]
# Strategic skips for non-critical issues that don't pose real security risks
skips = [
    "B311",  # random - OK for non-cryptographic use (IDs, sampling, testing)
    "B101",  # assert - OK in test assertions and development checks
    "B601",  # paramiko - OK when used correctly with validation
    "B603",  # subprocess - OK when shell=False (default) and input validated
    "B607",  # partial_path - OK when paths are from trusted config
    "B404",  # subprocess_import - OK, the usage is what matters
    "B112",  # try_except_continue - OK for non-critical error recovery
    "B110",  # try_except_pass - OK for optional cleanup and graceful degradation
]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]

# High severity issues that will still be caught:
# - SQL Injection (B608)
# - Hardcoded passwords (B105, B106, B107)
# - Shell injection (B602, B605)
# - Path traversal (B609)
# - Insecure deserialization (B301, B302, B303, B304, B305, B306)
# - XXE vulnerabilities (B314, B315, B316, B317, B318, B319, B320, B323, B324, B325)

# ======================================================================================
# RUFF - Ultra-Fast Linter (Rust-based, Faster than Flake8)
# ======================================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["build", "dist", "node_modules", ".venv", "__pycache__"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP"]
ignore = []

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]  # Allow unused imports and late imports in __init__.py
"tests/*" = ["ARG", "S101"]  # Allow unused args and asserts in tests
"app/cli/*" = ["ARG001"]  # Allow unused args in CLI commands (Click framework requirement)
"app/middleware/*" = ["ARG001"]  # Allow unused args in middleware (Flask framework requirement)

# ======================================================================================
# PYDOCSTYLE - Docstring Checker (Google/NumPy Standard)
# ======================================================================================
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]  # Allow missing docstrings in some places
match = "(?!test_|migrations|conftest).*\\.py"
