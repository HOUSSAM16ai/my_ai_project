# ======================================================================================
# CogniForge - Gitpod Constitution (v2.0 - Supabase Native)
# ======================================================================================
# This configuration is optimized for a Supabase-first workflow.

# === [PORT EXPOSURE PROTOCOL] ===
# Define which ports inside the workspace should be accessible.
ports:
  # Port for the main Flask web application.
  - port: 5000
    name: "Flask Web App"
    onOpen: open-preview  # Automatically open a preview tab.
    visibility: public

  # Port for the FastAPI AI service.
  - port: 8001
    name: "AI Service"
    onOpen: ignore
    visibility: public

  # Port for Supabase outbound connection (PostgreSQL)
  - port: 5432
    onOpen: ignore

# === [THE GENESIS PROTOCOL] ===
# Tasks to run ONCE when the workspace is created for the first time.
tasks:
  - name: "Initial Setup & Bootstrap"
    # This runs only when you create the workspace.
    init: |
      echo "üöÄ Initializing CogniForge Environment..."
      
      # 1. Create .env file from template.
      if [ ! -f .env ]; then
        cp .env.example .env
        echo "‚úÖ Created .env file. ‚ö†Ô∏è PLEASE CONFIGURE YOUR DATABASE_URL NOW."
      fi
      
      # 2. Install Python dependencies.
      echo "üì¶ Installing Python packages..."
      pip install --no-cache-dir -r requirements.txt
      
      echo "‚úÖ Initial setup complete! Your workspace is ready."

    # This runs every time you start the workspace.
    command: |
      echo "üéØ CogniForge Workspace is ready!"
      echo "--------------------------------------------------"
      echo "NEXT STEPS:"
      echo "1. Ensure DATABASE_URL in '.env' is correct."
      echo "2. Start all services: docker-compose up --build -d"
      echo "3. Apply database migrations: docker-compose run --rm web flask db upgrade"
      echo "4. Create your admin user: docker-compose run --rm web flask users create-admin"
      echo "--------------------------------------------------"
      
# === [VS CODE INTEGRATION] ===
# Install essential extensions for a productive environment.
vscode:
  extensions:
    - ms-python.python
    - ms-python.vscode-pylance
    - github.copilot
    - ms-azuretools.vscode-docker
    - esbenp.prettier-vscode
    - ms-python.black-formatter
    - mtxr.sqltools
    - mtxr.sqltools-driver-pg

# === [GITHUB INTEGRATION] ===
# Enable prebuilds to speed up workspace creation.
github:
  prebuilds:
    master: true
    branches: true
    pullRequests: true
    pullRequestsFromForks: false
    addCheck: true
    addComment: false
    addBadge: false
