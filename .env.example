# ======================================================================================
# CogniForge Environment Configuration
# Multi-Platform Support: Gitpod, GitHub Codespaces, Dev Containers, Local
# ======================================================================================

# ---------------------------------
# DATABASE CONFIGURATION (REQUIRED)
# ---------------------------------
# CogniForge uses Supabase PostgreSQL for ALL platforms
# This ensures consistency across Gitpod, Codespaces, and local development

# Get your Supabase connection string:
# 1. Go to https://supabase.com
# 2. Create a new project (or use existing)
# 3. Go to Project Settings â†’ Database
# 4. Copy "Connection pooling" string (recommended for production)
# 5. Replace the example below with your actual connection string

DATABASE_URL=postgresql://postgres.[YOUR-PROJECT-REF]:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres

# Example for direct connection (not pooled):
# DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres

# IMPORTANT: 
# - Replace [YOUR-PROJECT-REF] with your Supabase project reference
# - Replace [YOUR-PASSWORD] with your database password
# - Replace [REGION] with your region (e.g., us-east-1, eu-west-1)

# ---------------------------------
# APPLICATION CONFIGURATION
# ---------------------------------
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY=dev-secret-key-change-in-production-please-make-it-very-long-and-random
DEBUG=True

# ---------------------------------
# ADMIN USER CONFIGURATION
# ---------------------------------
# Default admin credentials (change these!)
ADMIN_EMAIL=benmerahhoussam16@gmail.com
ADMIN_PASSWORD=1111
ADMIN_NAME=Houssam Benmerah

# ---------------------------------
# AI SERVICE CONFIGURATION
# ---------------------------------
# OpenAI API Configuration
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4o-mini

# AI Service URL (internal Docker network)
AI_SERVICE_URL=http://ai_service:8000

# ---------------------------------
# VECTOR DATABASE CONFIGURATION
# ---------------------------------
# ChromaDB Configuration (for vector embeddings)
CHROMA_PERSIST_DIR=./data/chroma
CHROMA_COLLECTION_NAME=cogniforge_embeddings

# System Service Configuration
SYSTEM_SERVICE_MAX_FILE_SIZE=10485760
SYSTEM_SERVICE_FILE_CACHE_CAP=64
SYSTEM_SERVICE_ALLOWED_EXT=.py,.md,.txt,.json,.yml,.yaml,.js,.ts,.html,.css,.sh

# ---------------------------------
# SESSION & SECURITY
# ---------------------------------
SESSION_TYPE=filesystem
PERMANENT_SESSION_LIFETIME=3600
SESSION_COOKIE_SECURE=False
SESSION_COOKIE_HTTPONLY=True
SESSION_COOKIE_SAMESITE=Lax

# ---------------------------------
# SQLALCHEMY CONFIGURATION
# ---------------------------------
SQLALCHEMY_TRACK_MODIFICATIONS=False
SQLALCHEMY_ECHO=False

# ---------------------------------
# LOGGING CONFIGURATION
# ---------------------------------
LOG_LEVEL=INFO
LOG_FILE=app.log

# ---------------------------------
# PLATFORM-SPECIFIC VARIABLES
# ---------------------------------
# These are automatically set by the platform
# You don't need to configure them manually

# GITPOD_WORKSPACE_ID=       # Set by Gitpod
# CODESPACES=                # Set by GitHub Codespaces
# GITHUB_CODESPACE_TOKEN=    # Set by GitHub Codespaces
# REMOTE_CONTAINERS=         # Set by Dev Containers

# ---------------------------------
# OPTIONAL: SUPABASE ADDITIONAL CONFIG
# ---------------------------------
# If you're using Supabase features directly (storage, auth, etc.)
# SUPABASE_URL=https://[YOUR-PROJECT-REF].supabase.co
# SUPABASE_ANON_KEY=your-supabase-anon-key-here
# SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here

# ---------------------------------
# OPTIONAL: EMAIL CONFIGURATION
# ---------------------------------
# MAIL_SERVER=smtp.gmail.com
# MAIL_PORT=587
# MAIL_USE_TLS=True
# MAIL_USERNAME=your-email@gmail.com
# MAIL_PASSWORD=your-app-password

# ---------------------------------
# DEVELOPMENT HELPERS
# ---------------------------------
# Uncomment these for debugging
# FLASK_DEBUG=1
# SQLALCHEMY_ECHO=True
# EXPLAIN_TEMPLATE_LOADING=True

# ======================================================================================
# QUICK START GUIDE
# ======================================================================================
#
# 1. Copy this file: cp .env.example .env
# 2. Edit .env and set your DATABASE_URL (Supabase connection string)
# 3. (Optional) Set OPENAI_API_KEY if using AI features
# 4. Run: docker-compose up -d
# 5. Run migrations: docker-compose run --rm web flask db upgrade
# 6. Create admin: docker-compose run --rm web flask users create-admin
# 7. Access: http://localhost:5000
#
# For detailed setup instructions, see:
# - SETUP_GUIDE.md
# - MULTI_PLATFORM_SETUP.md
#
# ======================================================================================
 