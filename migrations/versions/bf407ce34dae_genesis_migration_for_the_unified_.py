"""Genesis migration for the unified Overmind schema

Revision ID: bf407ce34dae
Revises: 
Create Date: 2025-08-24 13:05:57.956570

"""
from alembic import op
import sqlalchemy as sa
# --- [THE CRITICAL FIX - STEP 1: IMPORT] ---
# We explicitly import our custom type, making it known to this script.
from app.models import JSONB_or_JSON


# revision identifiers, used by Alembic.
revision = 'bf407ce34dae'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - MANUALLY ARCHITECTED FOR PERFECTION ###
    
    # --- [ARCHITECTURAL FIX: Dependency-Aware Table Creation Order] ---
    # We create parent tables first (users, subjects) to avoid FK issues.
    
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(length=150), nullable=False),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('is_admin', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('subjects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )

    op.create_table('missions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('objective', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PLANNING', 'RUNNING', 'ADAPTING', 'SUCCESS', 'FAILED', 'CANCELED', name='missionstatus', native_enum=False), nullable=True),
    sa.Column('initiator_id', sa.Integer(), nullable=True),
    sa.Column('active_plan_id', sa.Integer(), nullable=True), # FK constraint will be added later
    sa.Column('locked', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('result_summary', sa.Text(), nullable=True),
    sa.Column('total_cost_usd', sa.Numeric(precision=12, scale=6), nullable=True),
    sa.Column('adaptive_cycles', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['initiator_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('missions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_missions_initiator_id'), ['initiator_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_missions_status'), ['status'], unique=False)

    op.create_table('mission_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mission_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('planner_name', sa.String(length=100), nullable=True),
    sa.Column('plan_json', JSONB_or_JSON(), nullable=False), # <-- FIX APPLIED
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('status', sa.Enum('CANDIDATE', 'ACTIVE', 'SUPERSEDED', 'FAILED', name='planstatus', native_enum=False), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['mission_id'], ['missions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mission_id', 'version', name='uq_mission_plan_version')
    )
    with op.batch_alter_table('mission_plans', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_mission_plans_mission_id'), ['mission_id'], unique=False)
    
    # Now that both `missions` and `mission_plans` exist, we can add the circular FK
    with op.batch_alter_table('missions', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_missions_active_plan_id', 'mission_plans', ['active_plan_id'], ['id'], use_alter=True)

    op.create_table('lessons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=250), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('subject_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('lessons', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_lessons_subject_id'), ['subject_id'], unique=False)

    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mission_id', sa.Integer(), nullable=True),
    sa.Column('plan_version', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tool_name', sa.String(length=255), nullable=True),
    sa.Column('tool_args', JSONB_or_JSON(), nullable=True), # <-- FIX APPLIED
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILED', 'SKIPPED', name='taskstatus', native_enum=False), nullable=True),
    sa.Column('result', JSONB_or_JSON(), nullable=True), # <-- FIX APPLIED
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('cost_usd', sa.Numeric(precision=12, scale=6), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['mission_id'], ['missions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tasks_mission_id'), ['mission_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_tasks_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_tasks_tool_name'), ['tool_name'], unique=False)

    op.create_table('exercises',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question', sa.Text(), nullable=True),
    sa.Column('correct_answer_data', JSONB_or_JSON(), nullable=True), # <-- FIX APPLIED
    sa.Column('lesson_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['lesson_id'], ['lessons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('exercises', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_exercises_lesson_id'), ['lesson_id'], unique=False)

    op.create_table('mission_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mission_id', sa.Integer(), nullable=True),
    sa.Column('task_id', sa.Integer(), nullable=True),
    sa.Column('event_type', sa.Enum('CREATED', 'STATUS_CHANGE', 'PLAN_SELECTED', 'TASK_STATUS_CHANGE', 'REPLAN_TRIGGERED', 'FINALIZED', name='missioneventtype', native_enum=False), nullable=True),
    sa.Column('payload', JSONB_or_JSON(), nullable=True), # <-- FIX APPLIED
    sa.Column('note', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['mission_id'], ['missions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('mission_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_mission_events_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_mission_events_mission_id'), ['mission_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_mission_events_task_id'), ['task_id'], unique=False)

    op.create_table('task_dependencies',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('depends_on_task_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['depends_on_task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'depends_on_task_id')
    )
    
    op.create_table('submissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_answer_data', JSONB_or_JSON(), nullable=True), # <-- FIX APPLIED
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.Column('feedback', sa.Text(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('exercise_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('submissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_submissions_exercise_id'), ['exercise_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_submissions_user_id'), ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - MANUALLY ADJUSTED FOR PERFECTION ###
    # We drop in the reverse order of creation.
    with op.batch_alter_table('submissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_submissions_user_id'))
        batch_op.drop_index(batch_op.f('ix_submissions_exercise_id'))
    op.drop_table('submissions')
    
    op.drop_table('task_dependencies')
    
    with op.batch_alter_table('mission_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mission_events_task_id'))
        batch_op.drop_index(batch_op.f('ix_mission_events_mission_id'))
        batch_op.drop_index(batch_op.f('ix_mission_events_event_type'))
    op.drop_table('mission_events')

    with op.batch_alter_table('exercises', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_exercises_lesson_id'))
    op.drop_table('exercises')

    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tasks_tool_name'))
        batch_op.drop_index(batch_op.f('ix_tasks_status'))
        batch_op.drop_index(batch_op.f('ix_tasks_mission_id'))
    op.drop_table('tasks')

    with op.batch_alter_table('lessons', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_lessons_subject_id'))
    op.drop_table('lessons')
    
    # Drop the explicitly created foreign key before dropping the parent tables
    with op.batch_alter_table('missions', schema=None) as batch_op:
        batch_op.drop_constraint('fk_missions_active_plan_id', type_='foreignkey')
    
    with op.batch_alter_table('mission_plans', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_mission_plans_mission_id'))
    op.drop_table('mission_plans')

    with op.batch_alter_table('missions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_missions_status'))
        batch_op.drop_index(batch_op.f('ix_missions_initiator_id'))
    op.drop_table('missions')

    op.drop_table('subjects')
    
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))
    op.drop_table('users')
    # ### end Alembic commands ###
